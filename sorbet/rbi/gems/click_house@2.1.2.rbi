# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `click_house` gem.
# Please instead update this file by running `bin/tapioca gem click_house`.

# source://click_house//lib/click_house/version.rb#3
module ClickHouse
  extend ::ClickHouse::Extend::TypeDefinition
  extend ::ClickHouse::Extend::Configurable
  extend ::ClickHouse::Extend::Connectible
end

# source://click_house//lib/click_house/ast.rb#4
module ClickHouse::Ast; end

# source://click_house//lib/click_house/ast/parser.rb#7
class ClickHouse::Ast::Parser
  # @param input [String]
  # @return [Parser] a new instance of Parser
  #
  # source://click_house//lib/click_house/ast/parser.rb#16
  def initialize(input); end

  # Returns the value of attribute input.
  #
  # source://click_house//lib/click_house/ast/parser.rb#13
  def input; end

  # Map(String, Decimal(10, 5))
  # Array(Array(Array(Array(Nullable(Int, String)))))
  #
  # source://click_house//lib/click_house/ast/parser.rb#23
  def parse; end
end

# source://click_house//lib/click_house/ast/parser.rb#9
ClickHouse::Ast::Parser::CLOSED = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/ast/parser.rb#10
ClickHouse::Ast::Parser::COMMA = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/ast/parser.rb#8
ClickHouse::Ast::Parser::OPEN = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/ast/parser.rb#11
ClickHouse::Ast::Parser::SPACE = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/ast/statement.rb#7
class ClickHouse::Ast::Statement
  # @return [Statement] a new instance of Statement
  #
  # source://click_house//lib/click_house/ast/statement.rb#15
  def initialize(name: T.unsafe(nil)); end

  # @param st [Statement]
  #
  # source://click_house//lib/click_house/ast/statement.rb#36
  def add_argument(st); end

  # source://click_house//lib/click_house/ast/statement.rb#30
  def argument!; end

  # source://click_house//lib/click_house/ast/statement.rb#68
  def argument_first!; end

  # cached argument values to increase the casting perfomance
  #
  # @return [Array]
  #
  # source://click_house//lib/click_house/ast/statement.rb#64
  def argument_values; end

  # @return [Array<Statement>]
  #
  # source://click_house//lib/click_house/ast/statement.rb#58
  def arguments; end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/ast/statement.rb#53
  def buffer?; end

  # Returns the value of attribute caster.
  #
  # source://click_house//lib/click_house/ast/statement.rb#13
  def caster; end

  # Sets the attribute caster
  #
  # @param value the value to set the attribute caster to.
  #
  # source://click_house//lib/click_house/ast/statement.rb#13
  def caster=(_arg0); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/ast/statement.rb#79
  def digit?; end

  # @param other [Statement]
  #
  # source://click_house//lib/click_house/ast/statement.rb#41
  def merge(other); end

  # Returns the value of attribute name.
  #
  # source://click_house//lib/click_house/ast/statement.rb#12
  def name; end

  # source://click_house//lib/click_house/ast/statement.rb#25
  def name!; end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/ast/statement.rb#49
  def named?; end

  # source://click_house//lib/click_house/ast/statement.rb#73
  def placeholder; end

  # @param value [String]
  #
  # source://click_house//lib/click_house/ast/statement.rb#21
  def print(value); end

  # source://click_house//lib/click_house/ast/statement.rb#96
  def to_s; end

  # source://click_house//lib/click_house/ast/statement.rb#83
  def value; end
end

# source://click_house//lib/click_house/ast/statement.rb#10
ClickHouse::Ast::Statement::DIGIT_RE = T.let(T.unsafe(nil), Regexp)

# source://click_house//lib/click_house/ast/statement.rb#9
ClickHouse::Ast::Statement::PLACEHOLDER_D = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/ast/statement.rb#8
ClickHouse::Ast::Statement::PLACEHOLDER_S = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/ast/ticker.rb#7
class ClickHouse::Ast::Ticker
  # @return [Ticker] a new instance of Ticker
  #
  # source://click_house//lib/click_house/ast/ticker.rb#10
  def initialize; end

  # @param char [String]
  #
  # source://click_house//lib/click_house/ast/ticker.rb#33
  def char(char); end

  # source://click_house//lib/click_house/ast/ticker.rb#26
  def close; end

  # source://click_house//lib/click_house/ast/ticker.rb#20
  def comma; end

  # Returns the value of attribute current.
  #
  # source://click_house//lib/click_house/ast/ticker.rb#8
  def current; end

  # source://click_house//lib/click_house/ast/ticker.rb#14
  def open; end

  # source://click_house//lib/click_house/ast/ticker.rb#37
  def opened; end

  # Returns the value of attribute root.
  #
  # source://click_house//lib/click_house/ast/ticker.rb#8
  def root; end
end

# source://click_house//lib/click_house/config.rb#4
class ClickHouse::Config
  # @return [Config] a new instance of Config
  # @yield [_self]
  # @yieldparam _self [ClickHouse::Config] the object that the method was called on
  #
  # source://click_house//lib/click_house/config.rb#59
  def initialize(params = T.unsafe(nil)); end

  # Returns the value of attribute adapter.
  #
  # source://click_house//lib/click_house/config.rb#38
  def adapter; end

  # Sets the attribute adapter
  #
  # @param value the value to set the attribute adapter to.
  #
  # source://click_house//lib/click_house/config.rb#38
  def adapter=(_arg0); end

  # @return [self]
  #
  # source://click_house//lib/click_house/config.rb#65
  def assign(params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/config.rb#71
  def auth?; end

  # Returns the value of attribute database.
  #
  # source://click_house//lib/click_house/config.rb#43
  def database; end

  # Sets the attribute database
  #
  # @param value the value to set the attribute database to.
  #
  # source://click_house//lib/click_house/config.rb#43
  def database=(_arg0); end

  # Returns the value of attribute global_params.
  #
  # source://click_house//lib/click_house/config.rb#51
  def global_params; end

  # Sets the attribute global_params
  #
  # @param value the value to set the attribute global_params to.
  #
  # source://click_house//lib/click_house/config.rb#51
  def global_params=(_arg0); end

  # Returns the value of attribute headers.
  #
  # source://click_house//lib/click_house/config.rb#50
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://click_house//lib/click_house/config.rb#50
  def headers=(_arg0); end

  # Returns the value of attribute host.
  #
  # source://click_house//lib/click_house/config.rb#41
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://click_house//lib/click_house/config.rb#41
  def host=(_arg0); end

  # Returns the value of attribute json_load_options.
  #
  # source://click_house//lib/click_house/config.rb#53
  def json_load_options; end

  # Sets the attribute json_load_options
  #
  # @param value the value to set the attribute json_load_options to.
  #
  # source://click_house//lib/click_house/config.rb#53
  def json_load_options=(_arg0); end

  # response middleware
  #
  # source://click_house//lib/click_house/config.rb#54
  def json_parser; end

  # response middleware
  #
  # source://click_house//lib/click_house/config.rb#54
  def json_parser=(_arg0); end

  # [ClickHouse::Serializer::Base]
  #
  # source://click_house//lib/click_house/config.rb#56
  def json_serializer; end

  # @param klass [ClickHouse::Serializer::Base]
  #
  # source://click_house//lib/click_house/config.rb#88
  def json_serializer=(klass); end

  # @param name [Symbol, String]
  #
  # source://click_house//lib/click_house/config.rb#103
  def key(name); end

  # Returns the value of attribute logger.
  #
  # source://click_house//lib/click_house/config.rb#39
  def logger; end

  # source://click_house//lib/click_house/config.rb#75
  def logger!; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://click_house//lib/click_house/config.rb#39
  def logger=(_arg0); end

  # source://click_house//lib/click_house/config.rb#83
  def null_logger; end

  # Returns the value of attribute oj_dump_options.
  #
  # source://click_house//lib/click_house/config.rb#55
  def oj_dump_options; end

  # Sets the attribute oj_dump_options
  #
  # @param value the value to set the attribute oj_dump_options to.
  #
  # source://click_house//lib/click_house/config.rb#55
  def oj_dump_options=(_arg0); end

  # Returns the value of attribute oj_load_options.
  #
  # source://click_house//lib/click_house/config.rb#52
  def oj_load_options; end

  # Sets the attribute oj_load_options
  #
  # @param value the value to set the attribute oj_load_options to.
  #
  # source://click_house//lib/click_house/config.rb#52
  def oj_load_options=(_arg0); end

  # Returns the value of attribute open_timeout.
  #
  # source://click_house//lib/click_house/config.rb#48
  def open_timeout; end

  # Sets the attribute open_timeout
  #
  # @param value the value to set the attribute open_timeout to.
  #
  # source://click_house//lib/click_house/config.rb#48
  def open_timeout=(_arg0); end

  # Returns the value of attribute password.
  #
  # source://click_house//lib/click_house/config.rb#46
  def password; end

  # Sets the attribute password
  #
  # @param value the value to set the attribute password to.
  #
  # source://click_house//lib/click_house/config.rb#46
  def password=(_arg0); end

  # Returns the value of attribute port.
  #
  # source://click_house//lib/click_house/config.rb#42
  def port; end

  # Sets the attribute port
  #
  # @param value the value to set the attribute port to.
  #
  # source://click_house//lib/click_house/config.rb#42
  def port=(_arg0); end

  # Returns the value of attribute scheme.
  #
  # source://click_house//lib/click_house/config.rb#40
  def scheme; end

  # Sets the attribute scheme
  #
  # @param value the value to set the attribute scheme to.
  #
  # source://click_house//lib/click_house/config.rb#40
  def scheme=(_arg0); end

  # Returns the value of attribute ssl_verify.
  #
  # source://click_house//lib/click_house/config.rb#49
  def ssl_verify; end

  # Sets the attribute ssl_verify
  #
  # @param value the value to set the attribute ssl_verify to.
  #
  # source://click_house//lib/click_house/config.rb#49
  def ssl_verify=(_arg0); end

  # [NilClass, Boolean]
  #
  # source://click_house//lib/click_house/config.rb#57
  def symbolize_keys; end

  # [NilClass, Boolean]
  #
  # source://click_house//lib/click_house/config.rb#92
  def symbolize_keys=(value); end

  # Returns the value of attribute timeout.
  #
  # source://click_house//lib/click_house/config.rb#47
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://click_house//lib/click_house/config.rb#47
  def timeout=(_arg0); end

  # Returns the value of attribute url.
  #
  # source://click_house//lib/click_house/config.rb#44
  def url; end

  # source://click_house//lib/click_house/config.rb#79
  def url!; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  #
  # source://click_house//lib/click_house/config.rb#44
  def url=(_arg0); end

  # Returns the value of attribute username.
  #
  # source://click_house//lib/click_house/config.rb#45
  def username; end

  # Sets the attribute username
  #
  # @param value the value to set the attribute username to.
  #
  # source://click_house//lib/click_house/config.rb#45
  def username=(_arg0); end
end

# source://click_house//lib/click_house/config.rb#5
ClickHouse::Config::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://click_house//lib/click_house/connection.rb#4
class ClickHouse::Connection
  include ::ClickHouse::Extend::ConnectionHealthy
  include ::ClickHouse::Extend::ConnectionDatabase
  include ::ClickHouse::Extend::ConnectionTable
  include ::ClickHouse::Extend::ConnectionSelective
  include ::ClickHouse::Extend::ConnectionInserting
  include ::ClickHouse::Extend::ConnectionAltering
  include ::ClickHouse::Extend::ConnectionExplaining

  # @param [Config]
  # @return [Connection] a new instance of Connection
  #
  # source://click_house//lib/click_house/connection.rb#16
  def initialize(config); end

  # source://click_house//lib/click_house/connection.rb#76
  def compose(path, query = T.unsafe(nil)); end

  # Returns the value of attribute config.
  #
  # source://click_house//lib/click_house/connection.rb#13
  def config; end

  # source://click_house//lib/click_house/connection.rb#20
  def execute(query, body = T.unsafe(nil), database: T.unsafe(nil), params: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/connection.rb#82
  def faraday_v1?; end

  # @example get(body: 'select number from system.numbers limit 100', query: { max_rows_to_read: 10 })
  # @param path [String] Clickhouse HTTP endpoint, e.g. /ping, /replica_status
  # @param body [String] SQL to run
  # @param database [String|NilClass] database to use, nil to skip
  # @param query [Hash] other CH settings to send through params, e.g. max_rows_to_read=1
  # @return [Faraday::Response]
  #
  # source://click_house//lib/click_house/connection.rb#30
  def get(path = T.unsafe(nil), body: T.unsafe(nil), query: T.unsafe(nil), database: T.unsafe(nil)); end

  # source://click_house//lib/click_house/connection.rb#45
  def post(body = T.unsafe(nil), query: T.unsafe(nil), database: T.unsafe(nil), params: T.unsafe(nil)); end

  # transport should work the same both with Faraday v1 and Faraday v2
  #
  # source://click_house//lib/click_house/connection.rb#51
  def transport; end
end

# source://click_house//lib/click_house/errors.rb#6
class ClickHouse::DbException < ::ClickHouse::Error; end

# source://click_house//lib/click_house/definition.rb#4
module ClickHouse::Definition; end

# source://click_house//lib/click_house/definition/column.rb#5
class ClickHouse::Definition::Column
  # @return [Column] a new instance of Column
  # @yield [_self]
  # @yieldparam _self [ClickHouse::Definition::Column] the object that the method was called on
  #
  # source://click_house//lib/click_house/definition/column.rb#15
  def initialize(params = T.unsafe(nil)); end

  # Returns the value of attribute default.
  #
  # source://click_house//lib/click_house/definition/column.rb#11
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://click_house//lib/click_house/definition/column.rb#11
  def default=(_arg0); end

  # source://click_house//lib/click_house/definition/column.rb#42
  def extension_type; end

  # Returns the value of attribute extensions.
  #
  # source://click_house//lib/click_house/definition/column.rb#10
  def extensions; end

  # Sets the attribute extensions
  #
  # @param value the value to set the attribute extensions to.
  #
  # source://click_house//lib/click_house/definition/column.rb#10
  def extensions=(_arg0); end

  # Returns the value of attribute low_cardinality.
  #
  # source://click_house//lib/click_house/definition/column.rb#9
  def low_cardinality; end

  # Sets the attribute low_cardinality
  #
  # @param value the value to set the attribute low_cardinality to.
  #
  # source://click_house//lib/click_house/definition/column.rb#9
  def low_cardinality=(_arg0); end

  # Returns the value of attribute materialized.
  #
  # source://click_house//lib/click_house/definition/column.rb#12
  def materialized; end

  # Sets the attribute materialized
  #
  # @param value the value to set the attribute materialized to.
  #
  # source://click_house//lib/click_house/definition/column.rb#12
  def materialized=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://click_house//lib/click_house/definition/column.rb#6
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://click_house//lib/click_house/definition/column.rb#6
  def name=(_arg0); end

  # Returns the value of attribute nullable.
  #
  # source://click_house//lib/click_house/definition/column.rb#8
  def nullable; end

  # Sets the attribute nullable
  #
  # @param value the value to set the attribute nullable to.
  #
  # source://click_house//lib/click_house/definition/column.rb#8
  def nullable=(_arg0); end

  # source://click_house//lib/click_house/definition/column.rb#28
  def opts; end

  # source://click_house//lib/click_house/definition/column.rb#20
  def to_s; end

  # Returns the value of attribute ttl.
  #
  # source://click_house//lib/click_house/definition/column.rb#13
  def ttl; end

  # Sets the attribute ttl
  #
  # @param value the value to set the attribute ttl to.
  #
  # source://click_house//lib/click_house/definition/column.rb#13
  def ttl=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://click_house//lib/click_house/definition/column.rb#7
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://click_house//lib/click_house/definition/column.rb#7
  def type=(_arg0); end
end

# source://click_house//lib/click_house/definition/column_set.rb#5
class ClickHouse::Definition::ColumnSet
  # @return [ColumnSet] a new instance of ColumnSet
  # @yield [_self]
  # @yieldparam _self [ClickHouse::Definition::ColumnSet] the object that the method was called on
  #
  # source://click_house//lib/click_house/definition/column_set.rb#36
  def initialize; end

  # source://click_house//lib/click_house/definition/column_set.rb#60
  def <<(sql); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Bool(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Date(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def DateTime(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def DateTime64(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Decimal(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Decimal128(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Decimal256(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Decimal32(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Decimal64(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def FixedString(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Float32(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Float64(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def IPv4(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def IPv6(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Int16(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Int32(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Int64(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def Int8(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def LowCardinality(*definition); end

  # @example
  #   t.Nested :json do |n|
  #   n.UInt8 :city_id
  #   end
  #
  # source://click_house//lib/click_house/definition/column_set.rb#54
  def Nested(name, &block); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def String(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def UInt16(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def UInt32(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def UInt64(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def UInt8(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#23
  def UUID(*definition); end

  # source://click_house//lib/click_house/definition/column_set.rb#40
  def columns; end

  # @example
  #   t.Nested :json do |n|
  #   n.UInt8 :city_id
  #   end
  #
  # source://click_house//lib/click_house/definition/column_set.rb#54
  def nested(name, &block); end

  # source://click_house//lib/click_house/definition/column_set.rb#60
  def push(sql); end

  # source://click_house//lib/click_house/definition/column_set.rb#44
  def to_s; end

  class << self
    # source://click_house//lib/click_house/definition/column_set.rb#13
    def method_name_for_type(type); end
  end
end

# source://click_house//lib/click_house/definition/column_set.rb#6
ClickHouse::Definition::ColumnSet::TYPES = T.let(T.unsafe(nil), Array)

# source://click_house//lib/click_house/errors.rb#4
class ClickHouse::Error < ::StandardError; end

# source://click_house//lib/click_house/extend.rb#4
module ClickHouse::Extend; end

# source://click_house//lib/click_house/extend/configurable.rb#5
module ClickHouse::Extend::Configurable
  # @yield [@config]
  #
  # source://click_house//lib/click_house/extend/configurable.rb#6
  def config(&block); end
end

# source://click_house//lib/click_house/extend/connectible.rb#5
module ClickHouse::Extend::Connectible
  # source://click_house//lib/click_house/extend/connectible.rb#10
  def connection; end

  # source://click_house//lib/click_house/extend/connectible.rb#6
  def connection=(connection); end
end

# source://click_house//lib/click_house/extend/connection_altering.rb#6
module ClickHouse::Extend::ConnectionAltering
  # source://click_house//lib/click_house/extend/connection_altering.rb#7
  def add_column(table, name, type, default: T.unsafe(nil), if_not_exists: T.unsafe(nil), after: T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_altering.rb#70
  def add_index(table_name, name, expression, type:, granularity: T.unsafe(nil), after: T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_altering.rb#57
  def alter_table(name, sql = T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_altering.rb#32
  def clear_column(table, name, partition:, if_exists: T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_altering.rb#21
  def drop_column(table, name, if_exists: T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_altering.rb#91
  def drop_index(table_name, name, cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_altering.rb#44
  def modify_column(table, name, type: T.unsafe(nil), default: T.unsafe(nil), if_exists: T.unsafe(nil), cluster: T.unsafe(nil)); end
end

# source://click_house//lib/click_house/extend/connection_database.rb#5
module ClickHouse::Extend::ConnectionDatabase
  # source://click_house//lib/click_house/extend/connection_database.rb#11
  def create_database(name, if_not_exists: T.unsafe(nil), cluster: T.unsafe(nil), engine: T.unsafe(nil)); end

  # @return [Array<String>]
  #
  # source://click_house//lib/click_house/extend/connection_database.rb#7
  def databases; end

  # source://click_house//lib/click_house/extend/connection_database.rb#24
  def drop_database(name, if_exists: T.unsafe(nil), cluster: T.unsafe(nil)); end
end

# source://click_house//lib/click_house/extend/connection_explaining.rb#5
module ClickHouse::Extend::ConnectionExplaining
  # @return String
  #
  # source://click_house//lib/click_house/extend/connection_explaining.rb#10
  def explain(sql, io: T.unsafe(nil)); end
end

# source://click_house//lib/click_house/extend/connection_explaining.rb#6
ClickHouse::Extend::ConnectionExplaining::EXPLAIN = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/extend/connection_explaining.rb#7
ClickHouse::Extend::ConnectionExplaining::EXPLAIN_RE = T.let(T.unsafe(nil), Regexp)

# source://click_house//lib/click_house/extend/connection_healthy.rb#5
module ClickHouse::Extend::ConnectionHealthy
  # source://click_house//lib/click_house/extend/connection_healthy.rb#6
  def ping; end

  # source://click_house//lib/click_house/extend/connection_healthy.rb#10
  def replicas_status; end
end

# source://click_house//lib/click_house/extend/connection_inserting.rb#5
module ClickHouse::Extend::ConnectionInserting
  # == Example with a block
  # insert('rspec', columns: %i[name id]) do |buffer|
  #   buffer << ['Sun', 1]
  #   buffer << ['Moon', 2]
  # end
  #
  #
  # @param body [Array, Hash]
  # @return [Boolean]
  # @return [Response::Execution]
  # @yield [body]
  #
  # source://click_house//lib/click_house/extend/connection_inserting.rb#20
  def insert(table, body = T.unsafe(nil), **opts); end

  # @return [Response::Execution]
  # @yield [values]
  #
  # source://click_house//lib/click_house/extend/connection_inserting.rb#75
  def insert_compact(table, columns: T.unsafe(nil), values: T.unsafe(nil), format: T.unsafe(nil)); end

  # Sometimes it's needed to use other format than JSONEachRow
  # For example if you want to send BigDecimal's you could use
  # JSONStringsEachRow format so string representation of BigDecimal will be parsed
  #
  # @param table [String]
  # @param body [Array, Hash]
  # @param format [String]
  # @return [Response::Execution]
  #
  # source://click_house//lib/click_house/extend/connection_inserting.rb#61
  def insert_rows(table, body, format: T.unsafe(nil)); end
end

# source://click_house//lib/click_house/extend/connection_inserting.rb#7
ClickHouse::Extend::ConnectionInserting::DEFAULT_JSON_COMPACT_EACH_ROW_FORMAT = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/extend/connection_inserting.rb#6
ClickHouse::Extend::ConnectionInserting::DEFAULT_JSON_EACH_ROW_FORMAT = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/extend/connection_selective.rb#5
module ClickHouse::Extend::ConnectionSelective
  # @return [ResultSet]
  #
  # source://click_house//lib/click_house/extend/connection_selective.rb#7
  def select_all(sql); end

  # source://click_house//lib/click_house/extend/connection_selective.rb#26
  def select_one(sql); end

  # source://click_house//lib/click_house/extend/connection_selective.rb#12
  def select_value(sql); end
end

# source://click_house//lib/click_house/extend/connection_table.rb#5
module ClickHouse::Extend::ConnectionTable
  # source://click_house//lib/click_house/extend/connection_table.rb#47
  def create_table(name, engine:, if_not_exists: T.unsafe(nil), cluster: T.unsafe(nil), partition: T.unsafe(nil), order: T.unsafe(nil), primary_key: T.unsafe(nil), sample: T.unsafe(nil), ttl: T.unsafe(nil), settings: T.unsafe(nil), &block); end

  # @return [ResultSet]
  #
  # source://click_house//lib/click_house/extend/connection_table.rb#12
  def describe_table(name); end

  # source://click_house//lib/click_house/extend/connection_table.rb#33
  def drop_table(name, temporary: T.unsafe(nil), if_exists: T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_table.rb#99
  def rename_table(from, to, cluster: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/extend/connection_table.rb#22
  def table_exists?(name, temporary: T.unsafe(nil)); end

  # @return [ResultSet]
  #
  # source://click_house//lib/click_house/extend/connection_table.rb#17
  def table_schema(name); end

  # @return [Array<String>]
  #
  # source://click_house//lib/click_house/extend/connection_table.rb#7
  def tables; end

  # source://click_house//lib/click_house/extend/connection_table.rb#83
  def truncate_table(name, if_exists: T.unsafe(nil), cluster: T.unsafe(nil)); end

  # source://click_house//lib/click_house/extend/connection_table.rb#95
  def truncate_tables(names = T.unsafe(nil), *argv); end
end

# source://click_house//lib/click_house/extend/type_definition.rb#5
module ClickHouse::Extend::TypeDefinition
  # source://click_house//lib/click_house/extend/type_definition.rb#10
  def add_type(type, klass); end

  # source://click_house//lib/click_house/extend/type_definition.rb#6
  def types; end
end

# source://click_house//lib/click_house/middleware.rb#4
module ClickHouse::Middleware; end

# source://click_house//lib/click_house/middleware/logging.rb#5
class ClickHouse::Middleware::Logging < ::Faraday::Middleware
  # @return [Logging] a new instance of Logging
  #
  # source://click_house//lib/click_house/middleware/logging.rb#13
  def initialize(app = T.unsafe(nil), logger:); end

  # source://click_house//lib/click_house/middleware/logging.rb#18
  def call(env); end

  # Returns the value of attribute logger.
  #
  # source://click_house//lib/click_house/middleware/logging.rb#11
  def logger; end

  # source://click_house//lib/click_house/middleware/logging.rb#24
  def on_complete(env); end

  # Returns the value of attribute starting.
  #
  # source://click_house//lib/click_house/middleware/logging.rb#11
  def starting; end

  private

  # source://click_house//lib/click_house/middleware/logging.rb#34
  def duration; end

  # source://click_house//lib/click_house/middleware/logging.rb#59
  def duration_stats_log(summary); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/middleware/logging.rb#43
  def log_body?(env); end

  # source://click_house//lib/click_house/middleware/logging.rb#51
  def query(env); end

  # source://click_house//lib/click_house/middleware/logging.rb#38
  def timestamp; end
end

# source://click_house//lib/click_house/middleware/logging.rb#8
ClickHouse::Middleware::Logging::EMPTY = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/middleware/logging.rb#9
ClickHouse::Middleware::Logging::GET = T.let(T.unsafe(nil), Symbol)

# source://click_house//lib/click_house/middleware/parse_csv.rb#5
class ClickHouse::Middleware::ParseCsv < ::ClickHouse::Middleware::ResponseBase
  # @param env [Faraday::Env]
  #
  # source://click_house//lib/click_house/middleware/parse_csv.rb#9
  def on_complete(env); end
end

# source://click_house//lib/click_house/middleware/parse_json.rb#5
class ClickHouse::Middleware::ParseJson < ::ClickHouse::Middleware::ResponseBase
  # @param env [Faraday::Env]
  #
  # source://click_house//lib/click_house/middleware/parse_json.rb#9
  def on_complete(env); end
end

# source://click_house//lib/click_house/middleware/parse_json_oj.rb#5
class ClickHouse::Middleware::ParseJsonOj < ::ClickHouse::Middleware::ResponseBase
  # @param env [Faraday::Env]
  #
  # source://click_house//lib/click_house/middleware/parse_json_oj.rb#9
  def on_complete(env); end

  private

  # source://click_house//lib/click_house/middleware/parse_json_oj.rb#17
  def on_setup; end
end

# source://click_house//lib/click_house/middleware/raise_error.rb#5
class ClickHouse::Middleware::RaiseError < ::Faraday::Middleware
  # @param env [Faraday::Env]
  #
  # source://click_house//lib/click_house/middleware/raise_error.rb#11
  def call(env); end

  # @param env [Faraday::Env]
  #
  # source://click_house//lib/click_house/middleware/raise_error.rb#18
  def on_complete(env); end
end

# source://click_house//lib/click_house/middleware/raise_error.rb#6
ClickHouse::Middleware::RaiseError::EXCEPTION_CODE_HEADER = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/middleware/response_base.rb#5
class ClickHouse::Middleware::ResponseBase < ::Faraday::Middleware
  # @return [ResponseBase] a new instance of ResponseBase
  #
  # source://click_house//lib/click_house/middleware/response_base.rb#11
  def initialize(app = T.unsafe(nil), options: T.unsafe(nil), content_type: T.unsafe(nil), preserve_raw: T.unsafe(nil)); end

  # @return [Config]
  #
  # source://click_house//lib/click_house/middleware/response_base.rb#34
  def config; end

  # Returns the value of attribute content_type.
  #
  # source://click_house//lib/click_house/middleware/response_base.rb#9
  def content_type; end

  # @param env [Faraday::Env]
  # @param regexp [NilClass, Regexp]
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/middleware/response_base.rb#22
  def content_type?(env, regexp); end

  # Returns the value of attribute options.
  #
  # source://click_house//lib/click_house/middleware/response_base.rb#8
  def options; end

  private

  # source://click_house//lib/click_house/middleware/response_base.rb#40
  def on_setup; end
end

# source://click_house//lib/click_house/middleware/response_base.rb#6
ClickHouse::Middleware::ResponseBase::CONTENT_TYPE_HEADER = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/middleware/summary_middleware.rb#5
class ClickHouse::Middleware::SummaryMiddleware < ::ClickHouse::Middleware::ResponseBase
  # @param env [Faraday::Env]
  #
  # source://click_house//lib/click_house/middleware/summary_middleware.rb#17
  def on_complete(env); end

  class << self
    # @param env [Faraday::Env]
    # @return [Response::Summary]
    #
    # source://click_house//lib/click_house/middleware/summary_middleware.rb#12
    def extract(env); end
  end
end

# source://click_house//lib/click_house/middleware/summary_middleware.rb#8
ClickHouse::Middleware::SummaryMiddleware::KEY = T.let(T.unsafe(nil), Symbol)

# source://click_house//lib/click_house/errors.rb#5
class ClickHouse::NetworkException < ::ClickHouse::Error; end

# source://click_house//lib/click_house/response.rb#4
module ClickHouse::Response; end

# source://click_house//lib/click_house/response/factory.rb#5
class ClickHouse::Response::Factory
  class << self
    # @return [Response::Summary]
    #
    # source://click_house//lib/click_house/response/factory.rb#46
    def empty_exec(config); end

    # Result of execution
    #
    # @return [Response::Summary]
    #
    # source://click_house//lib/click_house/response/factory.rb#41
    def exec(faraday); end

    # Rae ResultSet (without type casting)
    #
    # @return [ResultSet]
    #
    # source://click_house//lib/click_house/response/factory.rb#30
    def raw(faraday, config); end

    # @return [ResultSet]
    #
    # source://click_house//lib/click_house/response/factory.rb#12
    def response(faraday, config); end
  end
end

# source://click_house//lib/click_house/response/factory.rb#7
ClickHouse::Response::Factory::KEY_DATA = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/factory.rb#6
ClickHouse::Response::Factory::KEY_META = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/result_set.rb#5
class ClickHouse::Response::ResultSet
  include ::Enumerable
  extend ::Forwardable

  # @param config [Config]
  # @param meta [Array]
  # @param data [Array]
  # @param summary [Response::Summary]
  # @return [ResultSet] a new instance of ResultSet
  #
  # source://click_house//lib/click_house/response/result_set.rb#34
  def initialize(config:, meta:, data:, summary:, to_a: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # Returns the value of attribute config.
  #
  # source://click_house//lib/click_house/response/result_set.rb#20
  def config; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def count(*args, **_arg1, &block); end

  # Returns the value of attribute data.
  #
  # source://click_house//lib/click_house/response/result_set.rb#20
  def data; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def fetch(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def first(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def headers(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def inspect(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # Returns the value of attribute meta.
  #
  # source://click_house//lib/click_house/response/result_set.rb#20
  def meta; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rows_before_limit_at_least(*args, **_arg1, &block); end

  # @param data [Array, Hash]
  # @return [Array, Hash]
  #
  # source://click_house//lib/click_house/response/result_set.rb#44
  def serialize(data); end

  # @param name [String] column name
  # @param value [Any]
  #
  # source://click_house//lib/click_house/response/result_set.rb#65
  def serialize_column(name, value); end

  # @param row [Hash]
  # @return [Hash]
  #
  # source://click_house//lib/click_house/response/result_set.rb#57
  def serialize_one(row); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def statistics(*args, **_arg1, &block); end

  # Returns the value of attribute summary.
  #
  # source://click_house//lib/click_house/response/result_set.rb#20
  def summary; end

  # source://click_house//lib/click_house/response/result_set.rb#74
  def to_a; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_h(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def totals(*args, **_arg1, &block); end

  # @return [Hash<String, Ast::Statement>]
  #
  # source://click_house//lib/click_house/response/result_set.rb#83
  def types; end

  private

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#99
  def assign_type(stmt); end

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#132
  def cast_container(stmt, value); end

  # @param stmt [Ast::Statement]
  # @param hash [Hash]
  # @raise [ArgumentError]
  # @return [Hash]
  #
  # source://click_house//lib/click_house/response/result_set.rb#122
  def cast_map(stmt, hash); end

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#139
  def cast_tuple(stmt, value); end

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#111
  def cast_type(stmt, value); end

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#155
  def serialize_container(stmt, value); end

  # @param stmt [Ast::Statement]
  # @param hash [Hash]
  # @raise [ArgumentError]
  # @return [Hash]
  #
  # source://click_house//lib/click_house/response/result_set.rb#164
  def serialize_map(stmt, hash); end

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#174
  def serialize_tuple(stmt, value); end

  # @param stmt [Ast::Statement]
  #
  # source://click_house//lib/click_house/response/result_set.rb#146
  def serialize_type(stmt, value); end

  class << self
    # @param config [Config]
    # @return [ResultSet]
    #
    # source://click_house//lib/click_house/response/result_set.rb#25
    def raw(config:, data:, summary:); end
  end
end

# source://click_house//lib/click_house/response/result_set.rb#9
ClickHouse::Response::ResultSet::KEY_META_NAME = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/result_set.rb#10
ClickHouse::Response::ResultSet::KEY_META_TYPE = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/summary.rb#5
class ClickHouse::Response::Summary
  # TOTALS [Array|Hash|NilClass] Support for 'GROUP BY WITH TOTALS' modifier
  #   https://clickhouse.tech/docs/en/sql-reference/statements/select/group-by/#with-totals-modifier
  #   Hash in JSON format and Array in JSONCompact
  #
  # @param config [Config]
  # @param headers [Faraday::Utils::Headers]
  # @param body [Hash]
  # @return [Summary] a new instance of Summary
  #
  # source://click_house//lib/click_house/response/summary.rb#26
  def initialize(config, headers: T.unsafe(nil), body: T.unsafe(nil)); end

  # Returns the value of attribute config.
  #
  # source://click_house//lib/click_house/response/summary.rb#12
  def config; end

  # @return [Float]
  #
  # source://click_house//lib/click_house/response/summary.rb#81
  def elapsed; end

  # @return [String]
  #
  # source://click_house//lib/click_house/response/summary.rb#86
  def elapsed_pretty; end

  # Returns the value of attribute headers.
  #
  # source://click_house//lib/click_house/response/summary.rb#12
  def headers; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#41
  def read_bytes; end

  # @return [String]
  #
  # source://click_house//lib/click_house/response/summary.rb#46
  def read_bytes_pretty; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#36
  def read_rows; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#76
  def result_bytes; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#71
  def result_rows; end

  # Returns the value of attribute rows_before_limit_at_least.
  #
  # source://click_house//lib/click_house/response/summary.rb#12
  def rows_before_limit_at_least; end

  # Returns the value of attribute statistics.
  #
  # source://click_house//lib/click_house/response/summary.rb#12
  def statistics; end

  # Returns the value of attribute summary.
  #
  # source://click_house//lib/click_house/response/summary.rb#12
  def summary; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#66
  def total_rows_to_read; end

  # Returns the value of attribute totals.
  #
  # source://click_house//lib/click_house/response/summary.rb#12
  def totals; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#56
  def written_bytes; end

  # @return [String]
  #
  # source://click_house//lib/click_house/response/summary.rb#61
  def written_bytes_pretty; end

  # @return [Integer]
  #
  # source://click_house//lib/click_house/response/summary.rb#51
  def written_rows; end

  private

  # {
  #   "read_rows" => "1",
  #   "read_bytes" => "23",
  #   "written_rows" => "1",
  #   "written_bytes" => "23",
  #   "total_rows_to_read" => "0",
  #   "result_rows" => "1",
  #   "result_bytes" => "23",
  # }
  #
  # @return [Hash]
  #
  # source://click_house//lib/click_house/response/summary.rb#102
  def parse_summary(value); end
end

# source://click_house//lib/click_house/response/summary.rb#9
ClickHouse::Response::Summary::KEY_ROWS_BEFORE_LIMIT_AT_LEAST = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/summary.rb#8
ClickHouse::Response::Summary::KEY_STATISTICS = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/summary.rb#10
ClickHouse::Response::Summary::KEY_STAT_ELAPSED = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/summary.rb#7
ClickHouse::Response::Summary::KEY_TOTALS = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/response/summary.rb#6
ClickHouse::Response::Summary::SUMMARY_HEADER = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/errors.rb#8
class ClickHouse::SerializeError < ::ClickHouse::Error; end

# source://click_house//lib/click_house/serializer.rb#4
module ClickHouse::Serializer; end

# source://click_house//lib/click_house/serializer/base.rb#5
class ClickHouse::Serializer::Base
  # @param config [Config]
  # @return [Base] a new instance of Base
  #
  # source://click_house//lib/click_house/serializer/base.rb#9
  def initialize(config); end

  # Returns the value of attribute config.
  #
  # source://click_house//lib/click_house/serializer/base.rb#6
  def config; end

  # @raise [NotImplementedError]
  #
  # source://click_house//lib/click_house/serializer/base.rb#14
  def dump(data); end

  # @param data [Array]
  # @return [String]
  #
  # source://click_house//lib/click_house/serializer/base.rb#20
  def dump_each_row(data, sep = T.unsafe(nil)); end

  private

  # require external dependencies here
  #
  # source://click_house//lib/click_house/serializer/base.rb#27
  def on_setup; end
end

# source://click_house//lib/click_house/serializer/json_oj_serializer.rb#5
class ClickHouse::Serializer::JsonOjSerializer < ::ClickHouse::Serializer::Base
  # source://click_house//lib/click_house/serializer/json_oj_serializer.rb#6
  def dump(data); end

  private

  # source://click_house//lib/click_house/serializer/json_oj_serializer.rb#12
  def on_setup; end
end

# source://click_house//lib/click_house/serializer/json_serializer.rb#5
class ClickHouse::Serializer::JsonSerializer < ::ClickHouse::Serializer::Base
  # source://click_house//lib/click_house/serializer/json_serializer.rb#6
  def dump(data); end
end

# source://click_house//lib/click_house/errors.rb#7
class ClickHouse::StatementException < ::ClickHouse::Error; end

# source://click_house//lib/click_house/type.rb#4
module ClickHouse::Type; end

# source://click_house//lib/click_house/type/array_type.rb#5
class ClickHouse::Type::ArrayType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/array_type.rb#6
  def cast_each(value, *_argv, &block); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/array_type.rb#14
  def container?; end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/array_type.rb#18
  def ddl?; end

  # source://click_house//lib/click_house/type/array_type.rb#10
  def serialize_each(value, *_argv, &block); end
end

# source://click_house//lib/click_house/type/base_type.rb#5
class ClickHouse::Type::BaseType
  # @raise [NotImplementedError]
  #
  # source://click_house//lib/click_house/type/base_type.rb#6
  def cast(_value, *_arg1); end

  # @raise [NotImplementedError]
  #
  # source://click_house//lib/click_house/type/base_type.rb#10
  def cast_each(_value, *_arg1); end

  # true if type contains another type like Nullable(T) or Array(T)
  #
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/base_type.rb#20
  def container?; end

  # skip type from DDL statements
  #
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/base_type.rb#38
  def ddl?; end

  # true if type is a Map
  #
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/base_type.rb#26
  def map?; end

  # @raise [NotImplementedError]
  #
  # source://click_house//lib/click_house/type/base_type.rb#14
  def serialize_each(_value, *_arg1); end

  # true if type is a Tuple
  #
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/base_type.rb#32
  def tuple?; end
end

# source://click_house//lib/click_house/type/boolean_type.rb#5
class ClickHouse::Type::BooleanType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/boolean_type.rb#9
  def cast(value); end

  # source://click_house//lib/click_house/type/boolean_type.rb#18
  def serialize(value); end
end

# source://click_house//lib/click_house/type/boolean_type.rb#7
ClickHouse::Type::BooleanType::FALSE_VALUE = T.let(T.unsafe(nil), Integer)

# source://click_house//lib/click_house/type/boolean_type.rb#6
ClickHouse::Type::BooleanType::TRUE_VALUE = T.let(T.unsafe(nil), Integer)

# source://click_house//lib/click_house/type/date_time64_type.rb#5
class ClickHouse::Type::DateTime64Type < ::ClickHouse::Type::BaseType
  # Tick size (precision):
  #   10-precision seconds.
  #   Valid range: [ 0 : 9 ].
  #   Typically are used - 3 (milliseconds), 6 (microseconds), 9 (nanoseconds).
  #
  # source://click_house//lib/click_house/type/date_time64_type.rb#25
  def cast(value, precision = T.unsafe(nil), tz = T.unsafe(nil)); end

  # source://click_house//lib/click_house/type/date_time64_type.rb#35
  def serialize(value, precision = T.unsafe(nil), _tz = T.unsafe(nil)); end
end

# source://click_house//lib/click_house/type/date_time64_type.rb#6
ClickHouse::Type::DateTime64Type::BASE_FORMAT = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/type/date_time64_type.rb#7
ClickHouse::Type::DateTime64Type::CAST_FORMAT = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/type/date_time64_type.rb#8
ClickHouse::Type::DateTime64Type::SERIALIZE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://click_house//lib/click_house/type/date_time_type.rb#5
class ClickHouse::Type::DateTimeType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/date_time_type.rb#8
  def cast(value, tz = T.unsafe(nil)); end

  # source://click_house//lib/click_house/type/date_time_type.rb#16
  def serialize(value, *_arg1); end
end

# source://click_house//lib/click_house/type/date_time_type.rb#6
ClickHouse::Type::DateTimeType::FORMAT = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/type/date_type.rb#5
class ClickHouse::Type::DateType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/date_type.rb#8
  def cast(value); end

  # source://click_house//lib/click_house/type/date_type.rb#12
  def serialize(value); end
end

# source://click_house//lib/click_house/type/date_type.rb#6
ClickHouse::Type::DateType::FORMAT = T.let(T.unsafe(nil), String)

# source://click_house//lib/click_house/type/decimal_type.rb#5
class ClickHouse::Type::DecimalType < ::ClickHouse::Type::BaseType
  # clickhouse:
  # P - precision. Valid range: [ 1 : 76 ]. Determines how many decimal digits number can have (including fraction).
  # S - scale. Valid range: [ 0 : P ]. Determines how many decimal digits fraction can have.
  #
  # when Oj parser @refs https://stackoverflow.com/questions/47885304/deserialise-json-numbers-as-bigdecimal
  #
  # source://click_house//lib/click_house/type/decimal_type.rb#13
  def cast(value, precision = T.unsafe(nil), _scale = T.unsafe(nil)); end

  # @return [BigDecimal]
  #
  # source://click_house//lib/click_house/type/decimal_type.rb#25
  def serialize(value, precision = T.unsafe(nil), _scale = T.unsafe(nil)); end
end

# source://click_house//lib/click_house/type/decimal_type.rb#6
ClickHouse::Type::DecimalType::MAXIMUM = T.let(T.unsafe(nil), Integer)

# source://click_house//lib/click_house/type/fixed_string_type.rb#5
class ClickHouse::Type::FixedStringType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/fixed_string_type.rb#6
  def cast(value, _limit = T.unsafe(nil)); end

  # source://click_house//lib/click_house/type/fixed_string_type.rb#10
  def serialize(value, limit = T.unsafe(nil)); end
end

# source://click_house//lib/click_house/type/float_type.rb#5
class ClickHouse::Type::FloatType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/float_type.rb#6
  def cast(value); end

  # source://click_house//lib/click_house/type/float_type.rb#10
  def serialize(value); end
end

# source://click_house//lib/click_house/type/ip_type.rb#5
class ClickHouse::Type::IPType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/ip_type.rb#6
  def cast(value); end

  # source://click_house//lib/click_house/type/ip_type.rb#10
  def serialize(value); end
end

# source://click_house//lib/click_house/type/integer_type.rb#5
class ClickHouse::Type::IntegerType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/integer_type.rb#6
  def cast(value); end

  # source://click_house//lib/click_house/type/integer_type.rb#10
  def serialize(value); end
end

# source://click_house//lib/click_house/type/low_cardinality_type.rb#5
class ClickHouse::Type::LowCardinalityType < ::ClickHouse::Type::BaseType
  # @yield [value]
  #
  # source://click_house//lib/click_house/type/low_cardinality_type.rb#6
  def cast_each(value, *_argv); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/low_cardinality_type.rb#14
  def container?; end

  # @yield [value]
  #
  # source://click_house//lib/click_house/type/low_cardinality_type.rb#10
  def serialize_each(value, *_argv); end
end

# source://click_house//lib/click_house/type/map_type.rb#5
class ClickHouse::Type::MapType < ::ClickHouse::Type::BaseType
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/map_type.rb#10
  def ddl?; end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/map_type.rb#6
  def map?; end
end

# source://click_house//lib/click_house/type/nullable_type.rb#5
class ClickHouse::Type::NullableType < ::ClickHouse::Type::BaseType
  # @yield [value]
  #
  # source://click_house//lib/click_house/type/nullable_type.rb#6
  def cast_each(value, *_argv); end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/nullable_type.rb#14
  def container?; end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/nullable_type.rb#18
  def ddl?; end

  # @yield [value]
  #
  # source://click_house//lib/click_house/type/nullable_type.rb#10
  def serialize_each(value, *_argv); end
end

# source://click_house//lib/click_house/type/string_type.rb#5
class ClickHouse::Type::StringType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/string_type.rb#6
  def cast(value, *_arg1); end

  # source://click_house//lib/click_house/type/string_type.rb#10
  def serialize(value, *_arg1); end
end

# source://click_house//lib/click_house/type/tuple_type.rb#5
class ClickHouse::Type::TupleType < ::ClickHouse::Type::BaseType
  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/tuple_type.rb#10
  def ddl?; end

  # @return [Boolean]
  #
  # source://click_house//lib/click_house/type/tuple_type.rb#6
  def tuple?; end
end

# source://click_house//lib/click_house/type/undefined_type.rb#5
class ClickHouse::Type::UndefinedType < ::ClickHouse::Type::BaseType
  # source://click_house//lib/click_house/type/undefined_type.rb#6
  def cast(value, *_arg1); end

  # source://click_house//lib/click_house/type/undefined_type.rb#10
  def serialize(value, *_arg1); end
end

# source://click_house//lib/click_house/util.rb#4
module ClickHouse::Util
  private

  # wraps
  #
  # source://click_house//lib/click_house/util.rb#11
  def array(input); end

  class << self
    # wraps
    #
    # source://click_house//lib/click_house/util.rb#11
    def array(input); end
  end
end

# source://click_house//lib/click_house/util/pretty.rb#5
module ClickHouse::Util::Pretty
  private

  # source://click_house//lib/click_house/util/pretty.rb#21
  def measure(ms); end

  # source://click_house//lib/click_house/util/pretty.rb#11
  def size(bytes); end

  # source://click_house//lib/click_house/util/pretty.rb#25
  def squish(string); end

  class << self
    # source://click_house//lib/click_house/util/pretty.rb#21
    def measure(ms); end

    # source://click_house//lib/click_house/util/pretty.rb#11
    def size(bytes); end

    # source://click_house//lib/click_house/util/pretty.rb#25
    def squish(string); end
  end
end

# source://click_house//lib/click_house/util/pretty.rb#6
ClickHouse::Util::Pretty::SIZE_UNITS = T.let(T.unsafe(nil), Array)

# source://click_house//lib/click_house/util/statement.rb#5
module ClickHouse::Util::Statement
  private

  # source://click_house//lib/click_house/util/statement.rb#8
  def ensure(truthful, value, fallback = T.unsafe(nil)); end

  class << self
    # source://click_house//lib/click_house/util/statement.rb#8
    def ensure(truthful, value, fallback = T.unsafe(nil)); end
  end
end

# source://click_house//lib/click_house/version.rb#4
ClickHouse::VERSION = T.let(T.unsafe(nil), String)
