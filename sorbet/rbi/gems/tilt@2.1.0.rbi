# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tilt` gem.
# Please instead update this file by running `bin/tapioca gem tilt`.

# Namespace for Tilt. This module is not intended to be included anywhere.
#
# source://tilt//lib/tilt/template.rb#1
module Tilt; end

# @private
#
# source://tilt//lib/tilt/template.rb#3
module Tilt::CompiledTemplates; end

# ERB template implementation. See:
# http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html
#
# source://tilt//lib/tilt/erb.rb#7
class Tilt::ERBTemplate < ::Tilt::Template
  # @return [Boolean]
  #
  # source://tilt//lib/tilt/erb.rb#68
  def freeze_string_literals?; end

  # ERB generates a line to specify the character coding of the generated
  # source in 1.9. Account for this in the line offset.
  #
  # source://tilt//lib/tilt/erb.rb#63
  def precompiled(locals); end

  # source://tilt//lib/tilt/erb.rb#52
  def precompiled_postamble(locals); end

  # source://tilt//lib/tilt/erb.rb#44
  def precompiled_preamble(locals); end

  # source://tilt//lib/tilt/erb.rb#39
  def precompiled_template(locals); end

  # source://tilt//lib/tilt/erb.rb#21
  def prepare; end

  class << self
    # source://tilt//lib/tilt/erb.rb#12
    def default_output_variable; end

    # source://tilt//lib/tilt/erb.rb#16
    def default_output_variable=(name); end
  end
end

# source://tilt//lib/tilt/erb.rb#10
Tilt::ERBTemplate::SUPPORTS_KVARGS = T.let(T.unsafe(nil), Array)

# @private
#
# source://tilt//lib/tilt/template.rb#10
Tilt::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# @private
#
# source://tilt//lib/tilt/template.rb#7
Tilt::TOPOBJECT = Tilt::CompiledTemplates

# Base class for template implementations. Subclasses must implement
# the #prepare method and one of the #evaluate or #precompiled_template
# methods.
#
# source://tilt//lib/tilt/template.rb#15
class Tilt::Template
  # Create a new template with the file, line, and options specified. By
  # default, template data is read from the file. When a block is given,
  # it should read template data and return as a String. When file is nil,
  # a block is required.
  #
  # All arguments are optional.
  #
  # @raise [ArgumentError]
  # @return [Template] a new instance of Template
  #
  # source://tilt//lib/tilt/template.rb#60
  def initialize(file = T.unsafe(nil), line = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # The basename of the template file.
  #
  # source://tilt//lib/tilt/template.rb#115
  def basename(suffix = T.unsafe(nil)); end

  # A path ending in .rb that the template code will be written to, then
  # required, instead of being evaled.  This is useful for determining
  # coverage of compiled template code, or to use static analysis tools
  # on the compiled template code.
  #
  # source://tilt//lib/tilt/template.rb#34
  def compiled_path; end

  # Set the prefix to use for compiled paths.
  #
  # source://tilt//lib/tilt/template.rb#140
  def compiled_path=(path); end

  # Template source; loaded from a file or given directly.
  #
  # source://tilt//lib/tilt/template.rb#17
  def data; end

  # The filename used in backtraces to describe the template.
  #
  # source://tilt//lib/tilt/template.rb#125
  def eval_file; end

  # The name of the file where the template data was loaded from.
  #
  # source://tilt//lib/tilt/template.rb#20
  def file; end

  # The line number in #file where template data was loaded from.
  #
  # source://tilt//lib/tilt/template.rb#23
  def line; end

  # An empty Hash that the template engine can populate with various
  # metadata.
  #
  # source://tilt//lib/tilt/template.rb#131
  def metadata; end

  # The template file's basename with all extensions chomped off.
  #
  # source://tilt//lib/tilt/template.rb#120
  def name; end

  # A Hash of template engine specific options. This is passed directly
  # to the underlying engine and is not used by the generic template
  # interface.
  #
  # source://tilt//lib/tilt/template.rb#28
  def options; end

  # Render the template in the given scope with the locals specified. If a
  # block is given, it is typically available within the template via
  # +yield+.
  #
  # source://tilt//lib/tilt/template.rb#105
  def render(scope = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  protected

  # The encoding of the source data. Defaults to the
  # default_encoding-option if present. You may override this method
  # in your template class if you have a better hint of the data's
  # encoding.
  #
  # source://tilt//lib/tilt/template.rb#158
  def default_encoding; end

  # Execute the compiled template and return the result string. Template
  # evaluation is guaranteed to be performed in the scope object with the
  # locals specified and with support for yielding to the block.
  #
  # This method is only used by source generating templates. Subclasses that
  # override render() may not support all features.
  #
  # source://tilt//lib/tilt/template.rb#178
  def evaluate(scope, locals, &block); end

  # Generates all template source by combining the preamble, template, and
  # postamble and returns a two-tuple of the form: [source, offset], where
  # source is the string containing (Ruby) source code for the template and
  # offset is the integer line offset where line reporting should begin.
  #
  # Template subclasses may override this method when they need complete
  # control over source generation or want to adjust the default line
  # offset. In most cases, overriding the #precompiled_template method is
  # easier and more appropriate.
  #
  # source://tilt//lib/tilt/template.rb#206
  def precompiled(local_keys); end

  # source://tilt//lib/tilt/template.rb#240
  def precompiled_postamble(local_keys); end

  # source://tilt//lib/tilt/template.rb#236
  def precompiled_preamble(local_keys); end

  # A string containing the (Ruby) source code for the template. The
  # default Template#evaluate implementation requires either this
  # method or the #precompiled method be overridden. When defined,
  # the base Template guarantees correct file/line handling, locals
  # support, custom scopes, proper encoding, and support for template
  # compilation.
  #
  # @raise [NotImplementedError]
  #
  # source://tilt//lib/tilt/template.rb#232
  def precompiled_template(local_keys); end

  # Do whatever preparation is necessary to setup the underlying template
  # engine. Called immediately after template data is loaded. Instance
  # variables set in this method are available when #evaluate is called.
  #
  # Subclasses must provide an implementation of this method.
  #
  # @raise [NotImplementedError]
  #
  # source://tilt//lib/tilt/template.rb#165
  def prepare; end

  private

  # source://tilt//lib/tilt/template.rb#357
  def binary(string); end

  # source://tilt//lib/tilt/template.rb#300
  def bind_compiled_method(method_source, offset, scope_class, local_keys); end

  # source://tilt//lib/tilt/template.rb#274
  def compile_template_method(local_keys, scope_class = T.unsafe(nil)); end

  # The compiled method for the locals keys provided.
  #
  # source://tilt//lib/tilt/template.rb#258
  def compiled_method(locals_keys, scope_class = T.unsafe(nil)); end

  # source://tilt//lib/tilt/template.rb#325
  def eval_compiled_method(method_source, offset, scope_class); end

  # source://tilt//lib/tilt/template.rb#343
  def extract_encoding(script); end

  # source://tilt//lib/tilt/template.rb#347
  def extract_magic_comment(script); end

  # @return [Boolean]
  #
  # source://tilt//lib/tilt/template.rb#353
  def freeze_string_literals?; end

  # source://tilt//lib/tilt/template.rb#329
  def load_compiled_method(path, method_source); end

  # source://tilt//lib/tilt/template.rb#264
  def local_extraction(local_keys); end

  # source://tilt//lib/tilt/template.rb#248
  def read_template_file; end

  # source://tilt//lib/tilt/template.rb#337
  def unbind_compiled_method(method_name); end

  class << self
    # @deprecated Use `.metadata[:mime_type]` instead.
    #
    # source://tilt//lib/tilt/template.rb#44
    def default_mime_type; end

    # @deprecated Use `.metadata[:mime_type] = val` instead.
    #
    # source://tilt//lib/tilt/template.rb#49
    def default_mime_type=(value); end

    # An empty Hash that the template engine can populate with various
    # metadata.
    #
    # source://tilt//lib/tilt/template.rb#39
    def metadata; end
  end
end

# source://tilt//lib/tilt/template.rb#169
Tilt::Template::CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://tilt//lib/tilt/template.rb#170
Tilt::Template::USE_BIND_CALL = T.let(T.unsafe(nil), TrueClass)
