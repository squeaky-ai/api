# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Recording`.
# Please instead update this file by running `bin/tapioca dsl Recording`.

class Recording
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Recording).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Recording]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Recording)) }
    def fifth; end

    sig { returns(::Recording) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Recording)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Recording) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(T.nilable(T::Enumerator[::Recording]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Recording]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Recording]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Recording)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Recording) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Recording) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Recording) }
    def first!; end

    sig { returns(T.nilable(::Recording)) }
    def forty_two; end

    sig { returns(::Recording) }
    def forty_two!; end

    sig { returns(T.nilable(::Recording)) }
    def fourth; end

    sig { returns(::Recording) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Recording) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Recording).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Recording).void)
      ).returns(::Recording)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Recording).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Recording).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Recording)) }
    def second; end

    sig { returns(::Recording) }
    def second!; end

    sig { returns(T.nilable(::Recording)) }
    def second_to_last; end

    sig { returns(::Recording) }
    def second_to_last!; end

    sig { returns(::Recording) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Recording) }
    def take!; end

    sig { returns(T.nilable(::Recording)) }
    def third; end

    sig { returns(::Recording) }
    def third!; end

    sig { returns(T.nilable(::Recording)) }
    def third_to_last; end

    sig { returns(::Recording) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Nps) }
    def build_nps(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sentiment) }
    def build_sentiment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Site) }
    def build_site(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Visitor) }
    def build_visitor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Nps) }
    def create_nps(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Nps) }
    def create_nps!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sentiment) }
    def create_sentiment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sentiment) }
    def create_sentiment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Site) }
    def create_site(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Site) }
    def create_site!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Visitor) }
    def create_visitor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Visitor) }
    def create_visitor!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def note_ids=(ids); end

    # This method is created by ActiveRecord on the `Recording` class because it declared `has_many :notes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Note::PrivateCollectionProxy) }
    def notes; end

    sig { params(value: T::Enumerable[::Note]).void }
    def notes=(value); end

    sig { returns(T.nilable(::Nps)) }
    def nps; end

    sig { params(value: T.nilable(::Nps)).void }
    def nps=(value); end

    sig { returns(T::Array[T.untyped]) }
    def page_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def page_ids=(ids); end

    # This method is created by ActiveRecord on the `Recording` class because it declared `has_many :pages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Page::PrivateCollectionProxy) }
    def pages; end

    sig { params(value: T::Enumerable[::Page]).void }
    def pages=(value); end

    sig { returns(T.nilable(::Nps)) }
    def reload_nps; end

    sig { returns(T.nilable(::Sentiment)) }
    def reload_sentiment; end

    sig { returns(T.nilable(::Site)) }
    def reload_site; end

    sig { returns(T.nilable(::Visitor)) }
    def reload_visitor; end

    sig { returns(T.nilable(::Sentiment)) }
    def sentiment; end

    sig { params(value: T.nilable(::Sentiment)).void }
    def sentiment=(value); end

    sig { returns(T.nilable(::Site)) }
    def site; end

    sig { params(value: T.nilable(::Site)).void }
    def site=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tag_ids=(ids); end

    # This method is created by ActiveRecord on the `Recording` class because it declared `has_and_belongs_to_many :tags`.
    # ðŸ”— [Rails guide for `has_and_belongs_to_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association)
    sig { returns(::Tag::PrivateCollectionProxy) }
    def tags; end

    sig { params(value: T::Enumerable[::Tag]).void }
    def tags=(value); end

    sig { returns(T.nilable(::Visitor)) }
    def visitor; end

    sig { params(value: T.nilable(::Visitor)).void }
    def visitor=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def active_events_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def active_events_count=(value); end

    sig { returns(T::Boolean) }
    def active_events_count?; end

    sig { returns(T.nilable(::Integer)) }
    def active_events_count_before_last_save; end

    sig { returns(T.untyped) }
    def active_events_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_events_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def active_events_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def active_events_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def active_events_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def active_events_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def active_events_count_previous_change; end

    sig { returns(T::Boolean) }
    def active_events_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def active_events_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def active_events_count_was; end

    sig { void }
    def active_events_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def activity_duration; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def activity_duration=(value); end

    sig { returns(T::Boolean) }
    def activity_duration?; end

    sig { returns(T.nilable(::Integer)) }
    def activity_duration_before_last_save; end

    sig { returns(T.untyped) }
    def activity_duration_before_type_cast; end

    sig { returns(T::Boolean) }
    def activity_duration_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def activity_duration_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def activity_duration_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def activity_duration_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def activity_duration_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def activity_duration_previous_change; end

    sig { returns(T::Boolean) }
    def activity_duration_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def activity_duration_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def activity_duration_was; end

    sig { void }
    def activity_duration_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def bookmarked; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def bookmarked=(value); end

    sig { returns(T::Boolean) }
    def bookmarked?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bookmarked_before_last_save; end

    sig { returns(T.untyped) }
    def bookmarked_before_type_cast; end

    sig { returns(T::Boolean) }
    def bookmarked_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def bookmarked_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def bookmarked_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def bookmarked_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bookmarked_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def bookmarked_previous_change; end

    sig { returns(T::Boolean) }
    def bookmarked_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bookmarked_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def bookmarked_was; end

    sig { void }
    def bookmarked_will_change!; end

    sig { returns(T.nilable(::String)) }
    def browser; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def browser=(value); end

    sig { returns(T::Boolean) }
    def browser?; end

    sig { returns(T.nilable(::String)) }
    def browser_before_last_save; end

    sig { returns(T.untyped) }
    def browser_before_type_cast; end

    sig { returns(T::Boolean) }
    def browser_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def browser_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def browser_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def browser_changed?; end

    sig { returns(T.nilable(::String)) }
    def browser_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def browser_previous_change; end

    sig { returns(T::Boolean) }
    def browser_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def browser_previously_was; end

    sig { returns(T.nilable(::String)) }
    def browser_was; end

    sig { void }
    def browser_will_change!; end

    sig { returns(::Integer) }
    def connected_at; end

    sig { params(value: ::Integer).returns(::Integer) }
    def connected_at=(value); end

    sig { returns(T::Boolean) }
    def connected_at?; end

    sig { returns(T.nilable(::Integer)) }
    def connected_at_before_last_save; end

    sig { returns(T.untyped) }
    def connected_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def connected_at_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def connected_at_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def connected_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def connected_at_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def connected_at_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def connected_at_previous_change; end

    sig { returns(T::Boolean) }
    def connected_at_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def connected_at_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def connected_at_was; end

    sig { void }
    def connected_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_code=(value); end

    sig { returns(T::Boolean) }
    def country_code?; end

    sig { returns(T.nilable(::String)) }
    def country_code_before_last_save; end

    sig { returns(T.untyped) }
    def country_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def country_code_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_previous_change; end

    sig { returns(T::Boolean) }
    def country_code_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_code_was; end

    sig { void }
    def country_code_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def device_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def device_type=(value); end

    sig { returns(T::Boolean) }
    def device_type?; end

    sig { returns(T.nilable(::String)) }
    def device_type_before_last_save; end

    sig { returns(T.untyped) }
    def device_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def device_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def device_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def device_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def device_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def device_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def device_type_previous_change; end

    sig { returns(T::Boolean) }
    def device_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def device_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def device_type_was; end

    sig { void }
    def device_type_will_change!; end

    sig { returns(::Integer) }
    def device_x; end

    sig { params(value: ::Integer).returns(::Integer) }
    def device_x=(value); end

    sig { returns(T::Boolean) }
    def device_x?; end

    sig { returns(T.nilable(::Integer)) }
    def device_x_before_last_save; end

    sig { returns(T.untyped) }
    def device_x_before_type_cast; end

    sig { returns(T::Boolean) }
    def device_x_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def device_x_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def device_x_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def device_x_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def device_x_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def device_x_previous_change; end

    sig { returns(T::Boolean) }
    def device_x_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def device_x_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def device_x_was; end

    sig { void }
    def device_x_will_change!; end

    sig { returns(::Integer) }
    def device_y; end

    sig { params(value: ::Integer).returns(::Integer) }
    def device_y=(value); end

    sig { returns(T::Boolean) }
    def device_y?; end

    sig { returns(T.nilable(::Integer)) }
    def device_y_before_last_save; end

    sig { returns(T.untyped) }
    def device_y_before_type_cast; end

    sig { returns(T::Boolean) }
    def device_y_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def device_y_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def device_y_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def device_y_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def device_y_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def device_y_previous_change; end

    sig { returns(T::Boolean) }
    def device_y_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def device_y_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def device_y_was; end

    sig { void }
    def device_y_will_change!; end

    sig { returns(::Integer) }
    def disconnected_at; end

    sig { params(value: ::Integer).returns(::Integer) }
    def disconnected_at=(value); end

    sig { returns(T::Boolean) }
    def disconnected_at?; end

    sig { returns(T.nilable(::Integer)) }
    def disconnected_at_before_last_save; end

    sig { returns(T.untyped) }
    def disconnected_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def disconnected_at_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def disconnected_at_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def disconnected_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def disconnected_at_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def disconnected_at_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def disconnected_at_previous_change; end

    sig { returns(T::Boolean) }
    def disconnected_at_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def disconnected_at_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def disconnected_at_was; end

    sig { void }
    def disconnected_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def events_key_prefix; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def events_key_prefix=(value); end

    sig { returns(T::Boolean) }
    def events_key_prefix?; end

    sig { returns(T.nilable(::String)) }
    def events_key_prefix_before_last_save; end

    sig { returns(T.untyped) }
    def events_key_prefix_before_type_cast; end

    sig { returns(T::Boolean) }
    def events_key_prefix_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def events_key_prefix_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def events_key_prefix_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def events_key_prefix_changed?; end

    sig { returns(T.nilable(::String)) }
    def events_key_prefix_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def events_key_prefix_previous_change; end

    sig { returns(T::Boolean) }
    def events_key_prefix_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def events_key_prefix_previously_was; end

    sig { returns(T.nilable(::String)) }
    def events_key_prefix_was; end

    sig { void }
    def events_key_prefix_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Array[::String]) }
    def inactivity; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def inactivity=(value); end

    sig { returns(T::Boolean) }
    def inactivity?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def inactivity_before_last_save; end

    sig { returns(T.untyped) }
    def inactivity_before_type_cast; end

    sig { returns(T::Boolean) }
    def inactivity_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def inactivity_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def inactivity_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def inactivity_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def inactivity_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def inactivity_previous_change; end

    sig { returns(T::Boolean) }
    def inactivity_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def inactivity_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def inactivity_was; end

    sig { void }
    def inactivity_will_change!; end

    sig { returns(::String) }
    def locale; end

    sig { params(value: ::String).returns(::String) }
    def locale=(value); end

    sig { returns(T::Boolean) }
    def locale?; end

    sig { returns(T.nilable(::String)) }
    def locale_before_last_save; end

    sig { returns(T.untyped) }
    def locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def locale_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def locale_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def locale_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def locale_changed?; end

    sig { returns(T.nilable(::String)) }
    def locale_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def locale_previous_change; end

    sig { returns(T::Boolean) }
    def locale_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def locale_was; end

    sig { void }
    def locale_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def pages_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def pages_count=(value); end

    sig { returns(T::Boolean) }
    def pages_count?; end

    sig { returns(T.nilable(::Integer)) }
    def pages_count_before_last_save; end

    sig { returns(T.untyped) }
    def pages_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def pages_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pages_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pages_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def pages_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def pages_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pages_count_previous_change; end

    sig { returns(T::Boolean) }
    def pages_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def pages_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pages_count_was; end

    sig { void }
    def pages_count_will_change!; end

    sig { returns(T.nilable(::String)) }
    def referrer; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def referrer=(value); end

    sig { returns(T::Boolean) }
    def referrer?; end

    sig { returns(T.nilable(::String)) }
    def referrer_before_last_save; end

    sig { returns(T.untyped) }
    def referrer_before_type_cast; end

    sig { returns(T::Boolean) }
    def referrer_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def referrer_changed?; end

    sig { returns(T.nilable(::String)) }
    def referrer_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_previous_change; end

    sig { returns(T::Boolean) }
    def referrer_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def referrer_previously_was; end

    sig { returns(T.nilable(::String)) }
    def referrer_was; end

    sig { void }
    def referrer_will_change!; end

    sig { void }
    def restore_active_events_count!; end

    sig { void }
    def restore_activity_duration!; end

    sig { void }
    def restore_bookmarked!; end

    sig { void }
    def restore_browser!; end

    sig { void }
    def restore_connected_at!; end

    sig { void }
    def restore_country_code!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_device_type!; end

    sig { void }
    def restore_device_x!; end

    sig { void }
    def restore_device_y!; end

    sig { void }
    def restore_disconnected_at!; end

    sig { void }
    def restore_events_key_prefix!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_inactivity!; end

    sig { void }
    def restore_locale!; end

    sig { void }
    def restore_pages_count!; end

    sig { void }
    def restore_referrer!; end

    sig { void }
    def restore_session_id!; end

    sig { void }
    def restore_site_id!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_useragent!; end

    sig { void }
    def restore_utm_campaign!; end

    sig { void }
    def restore_utm_content!; end

    sig { void }
    def restore_utm_medium!; end

    sig { void }
    def restore_utm_source!; end

    sig { void }
    def restore_utm_term!; end

    sig { void }
    def restore_viewed!; end

    sig { void }
    def restore_viewport_x!; end

    sig { void }
    def restore_viewport_y!; end

    sig { void }
    def restore_visitor_id!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_active_events_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_active_events_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_activity_duration; end

    sig { returns(T::Boolean) }
    def saved_change_to_activity_duration?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_bookmarked; end

    sig { returns(T::Boolean) }
    def saved_change_to_bookmarked?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_browser; end

    sig { returns(T::Boolean) }
    def saved_change_to_browser?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_connected_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_connected_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_code?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_device_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_device_type?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_device_x; end

    sig { returns(T::Boolean) }
    def saved_change_to_device_x?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_device_y; end

    sig { returns(T::Boolean) }
    def saved_change_to_device_y?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_disconnected_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_disconnected_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_events_key_prefix; end

    sig { returns(T::Boolean) }
    def saved_change_to_events_key_prefix?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_inactivity; end

    sig { returns(T::Boolean) }
    def saved_change_to_inactivity?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_locale?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_pages_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_pages_count?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_referrer; end

    sig { returns(T::Boolean) }
    def saved_change_to_referrer?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_session_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_session_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_site_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_site_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timezone; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_useragent; end

    sig { returns(T::Boolean) }
    def saved_change_to_useragent?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_campaign; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_campaign?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_content; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_content?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_medium; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_medium?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_source?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_term; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_term?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_viewed; end

    sig { returns(T::Boolean) }
    def saved_change_to_viewed?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_viewport_x; end

    sig { returns(T::Boolean) }
    def saved_change_to_viewport_x?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_viewport_y; end

    sig { returns(T::Boolean) }
    def saved_change_to_viewport_y?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_visitor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_visitor_id?; end

    sig { returns(::String) }
    def session_id; end

    sig { params(value: ::String).returns(::String) }
    def session_id=(value); end

    sig { returns(T::Boolean) }
    def session_id?; end

    sig { returns(T.nilable(::String)) }
    def session_id_before_last_save; end

    sig { returns(T.untyped) }
    def session_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def session_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def session_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def session_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def session_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def session_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def session_id_previous_change; end

    sig { returns(T::Boolean) }
    def session_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def session_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def session_id_was; end

    sig { void }
    def session_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def site_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def site_id=(value); end

    sig { returns(T::Boolean) }
    def site_id?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_before_last_save; end

    sig { returns(T.untyped) }
    def site_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def site_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def site_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def site_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def site_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def site_id_previous_change; end

    sig { returns(T::Boolean) }
    def site_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_was; end

    sig { void }
    def site_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def status; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::Integer)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def status_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def status_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def status_previous_change; end

    sig { returns(T::Boolean) }
    def status_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def status_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def timezone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def timezone_changed?; end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_previous_change; end

    sig { returns(T::Boolean) }
    def timezone_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def useragent; end

    sig { params(value: ::String).returns(::String) }
    def useragent=(value); end

    sig { returns(T::Boolean) }
    def useragent?; end

    sig { returns(T.nilable(::String)) }
    def useragent_before_last_save; end

    sig { returns(T.untyped) }
    def useragent_before_type_cast; end

    sig { returns(T::Boolean) }
    def useragent_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def useragent_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def useragent_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def useragent_changed?; end

    sig { returns(T.nilable(::String)) }
    def useragent_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def useragent_previous_change; end

    sig { returns(T::Boolean) }
    def useragent_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def useragent_previously_was; end

    sig { returns(T.nilable(::String)) }
    def useragent_was; end

    sig { void }
    def useragent_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_campaign=(value); end

    sig { returns(T::Boolean) }
    def utm_campaign?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_before_last_save; end

    sig { returns(T.untyped) }
    def utm_campaign_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_campaign_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_campaign_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_previous_change; end

    sig { returns(T::Boolean) }
    def utm_campaign_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_was; end

    sig { void }
    def utm_campaign_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_content; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_content=(value); end

    sig { returns(T::Boolean) }
    def utm_content?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_before_last_save; end

    sig { returns(T.untyped) }
    def utm_content_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_content_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_content_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_previous_change; end

    sig { returns(T::Boolean) }
    def utm_content_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_content_was; end

    sig { void }
    def utm_content_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_medium; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_medium=(value); end

    sig { returns(T::Boolean) }
    def utm_medium?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_before_last_save; end

    sig { returns(T.untyped) }
    def utm_medium_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_medium_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_medium_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_previous_change; end

    sig { returns(T::Boolean) }
    def utm_medium_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_was; end

    sig { void }
    def utm_medium_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_source; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_source=(value); end

    sig { returns(T::Boolean) }
    def utm_source?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_before_last_save; end

    sig { returns(T.untyped) }
    def utm_source_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_source_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_source_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_previous_change; end

    sig { returns(T::Boolean) }
    def utm_source_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_source_was; end

    sig { void }
    def utm_source_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_term; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_term=(value); end

    sig { returns(T::Boolean) }
    def utm_term?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_before_last_save; end

    sig { returns(T.untyped) }
    def utm_term_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_term_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_term_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_previous_change; end

    sig { returns(T::Boolean) }
    def utm_term_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_term_was; end

    sig { void }
    def utm_term_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def viewed; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def viewed=(value); end

    sig { returns(T::Boolean) }
    def viewed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def viewed_before_last_save; end

    sig { returns(T.untyped) }
    def viewed_before_type_cast; end

    sig { returns(T::Boolean) }
    def viewed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def viewed_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def viewed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def viewed_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def viewed_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def viewed_previous_change; end

    sig { returns(T::Boolean) }
    def viewed_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def viewed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def viewed_was; end

    sig { void }
    def viewed_will_change!; end

    sig { returns(::Integer) }
    def viewport_x; end

    sig { params(value: ::Integer).returns(::Integer) }
    def viewport_x=(value); end

    sig { returns(T::Boolean) }
    def viewport_x?; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_x_before_last_save; end

    sig { returns(T.untyped) }
    def viewport_x_before_type_cast; end

    sig { returns(T::Boolean) }
    def viewport_x_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def viewport_x_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def viewport_x_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def viewport_x_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_x_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def viewport_x_previous_change; end

    sig { returns(T::Boolean) }
    def viewport_x_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_x_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_x_was; end

    sig { void }
    def viewport_x_will_change!; end

    sig { returns(::Integer) }
    def viewport_y; end

    sig { params(value: ::Integer).returns(::Integer) }
    def viewport_y=(value); end

    sig { returns(T::Boolean) }
    def viewport_y?; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_y_before_last_save; end

    sig { returns(T.untyped) }
    def viewport_y_before_type_cast; end

    sig { returns(T::Boolean) }
    def viewport_y_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def viewport_y_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def viewport_y_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def viewport_y_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_y_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def viewport_y_previous_change; end

    sig { returns(T::Boolean) }
    def viewport_y_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_y_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def viewport_y_was; end

    sig { void }
    def viewport_y_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def visitor_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def visitor_id=(value); end

    sig { returns(T::Boolean) }
    def visitor_id?; end

    sig { returns(T.nilable(::Integer)) }
    def visitor_id_before_last_save; end

    sig { returns(T.untyped) }
    def visitor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def visitor_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def visitor_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def visitor_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def visitor_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def visitor_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def visitor_id_previous_change; end

    sig { returns(T::Boolean) }
    def visitor_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def visitor_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def visitor_id_was; end

    sig { void }
    def visitor_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active_events_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_activity_duration?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bookmarked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_browser?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_connected_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_device_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_device_x?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_device_y?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disconnected_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_events_key_prefix?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_inactivity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pages_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referrer?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_session_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_site_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_useragent?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_campaign?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_content?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_medium?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_term?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_viewed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_viewport_x?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_viewport_y?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visitor_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Recording } }

    sig { returns(T::Array[::Recording]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Recording } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Recording } }

    sig do
      params(
        records: T.any(::Recording, T::Enumerable[T.any(::Recording, T::Enumerable[::Recording])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Recording, T::Enumerable[T.any(::Recording, T::Enumerable[::Recording])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Recording, T::Enumerable[T.any(::Recording, T::Enumerable[::Recording])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Recording, Integer, String, T::Enumerable[T.any(::Recording, Integer, String, T::Enumerable[::Recording])])
      ).returns(T::Array[::Recording])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Recording, Integer, String, T::Enumerable[T.any(::Recording, Integer, String, T::Enumerable[::Recording])])
      ).returns(T::Array[::Recording])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Recording]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Recording, T::Enumerable[T.any(::Recording, T::Enumerable[::Recording])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Recording, T::Enumerable[T.any(::Recording, T::Enumerable[::Recording])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Recording, T::Enumerable[T.any(::Recording, T::Enumerable[::Recording])])
      ).returns(T::Array[::Recording])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Recording]) }
    def target; end

    sig { returns(T::Array[::Recording]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Recording } }

    sig { returns(T::Array[::Recording]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Recording } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
