# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Plan`.
# Please instead update this file by running `bin/tapioca dsl Plan`.

class Plan
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Plan).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Plan]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Plan)) }
    def fifth; end

    sig { returns(::Plan) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Plan)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Plan) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Plan).void)
      ).returns(T.nilable(T::Enumerator[::Plan]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Plan]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Plan]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Plan)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Plan) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Plan) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Plan) }
    def first!; end

    sig { returns(T.nilable(::Plan)) }
    def forty_two; end

    sig { returns(::Plan) }
    def forty_two!; end

    sig { returns(T.nilable(::Plan)) }
    def fourth; end

    sig { returns(::Plan) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Plan) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Plan).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Plan).void)).returns(::Plan) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Plan).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Plan).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Plan)) }
    def second; end

    sig { returns(::Plan) }
    def second!; end

    sig { returns(T.nilable(::Plan)) }
    def second_to_last; end

    sig { returns(::Plan) }
    def second_to_last!; end

    sig { returns(::Plan) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Plan) }
    def take!; end

    sig { returns(T.nilable(::Plan)) }
    def third; end

    sig { returns(::Plan) }
    def third!; end

    sig { returns(T.nilable(::Plan)) }
    def third_to_last; end

    sig { returns(::Plan) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Site) }
    def build_site(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Site) }
    def create_site(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Site) }
    def create_site!(*args, &blk); end

    sig { returns(T.nilable(::Site)) }
    def reload_site; end

    sig { returns(T.nilable(::Site)) }
    def site; end

    sig { params(value: T.nilable(::Site)).void }
    def site=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def audit_trail_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def audit_trail_enabled=(value); end

    sig { returns(T::Boolean) }
    def audit_trail_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def audit_trail_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def audit_trail_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def audit_trail_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def audit_trail_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def audit_trail_enabled_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def audit_trail_enabled_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def audit_trail_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def audit_trail_enabled_previous_change; end

    sig { returns(T::Boolean) }
    def audit_trail_enabled_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def audit_trail_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def audit_trail_enabled_was; end

    sig { void }
    def audit_trail_enabled_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def data_storage_months; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def data_storage_months=(value); end

    sig { returns(T::Boolean) }
    def data_storage_months?; end

    sig { returns(T.nilable(::Integer)) }
    def data_storage_months_before_last_save; end

    sig { returns(T.untyped) }
    def data_storage_months_before_type_cast; end

    sig { returns(T::Boolean) }
    def data_storage_months_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def data_storage_months_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def data_storage_months_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def data_storage_months_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def data_storage_months_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def data_storage_months_previous_change; end

    sig { returns(T::Boolean) }
    def data_storage_months_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def data_storage_months_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def data_storage_months_was; end

    sig { void }
    def data_storage_months_will_change!; end

    sig { returns(T.untyped) }
    def deprecated; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def deprecated=(value); end

    sig { returns(T.untyped) }
    def deprecated_before_last_save; end

    sig { returns(T.untyped) }
    def deprecated_before_type_cast; end

    sig { returns(T::Boolean) }
    def deprecated_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def deprecated_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def deprecated_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def deprecated_changed?; end

    sig { returns(T.untyped) }
    def deprecated_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def deprecated_previous_change; end

    sig { returns(T::Boolean) }
    def deprecated_previously_changed?; end

    sig { returns(T.untyped) }
    def deprecated_previously_was; end

    sig { returns(T.untyped) }
    def deprecated_was; end

    sig { void }
    def deprecated_will_change!; end

    sig { returns(T.untyped) }
    def enterprise; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def enterprise=(value); end

    sig { returns(T.untyped) }
    def enterprise_before_last_save; end

    sig { returns(T.untyped) }
    def enterprise_before_type_cast; end

    sig { returns(T::Boolean) }
    def enterprise_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def enterprise_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def enterprise_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def enterprise_changed?; end

    sig { returns(T.untyped) }
    def enterprise_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def enterprise_previous_change; end

    sig { returns(T::Boolean) }
    def enterprise_previously_changed?; end

    sig { returns(T.untyped) }
    def enterprise_previously_was; end

    sig { returns(T.untyped) }
    def enterprise_was; end

    sig { void }
    def enterprise_will_change!; end

    sig { returns(T.untyped) }
    def exceeded; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def exceeded=(value); end

    sig { returns(T.untyped) }
    def exceeded_before_last_save; end

    sig { returns(T.untyped) }
    def exceeded_before_type_cast; end

    sig { returns(T::Boolean) }
    def exceeded_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def exceeded_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def exceeded_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def exceeded_changed?; end

    sig { returns(T.untyped) }
    def exceeded_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def exceeded_previous_change; end

    sig { returns(T::Boolean) }
    def exceeded_previously_changed?; end

    sig { returns(T.untyped) }
    def exceeded_previously_was; end

    sig { returns(T.untyped) }
    def exceeded_was; end

    sig { void }
    def exceeded_will_change!; end

    sig { returns(T.nilable(T::Array[::String])) }
    def features_enabled; end

    sig { params(value: T.nilable(T::Array[::String])).returns(T.nilable(T::Array[::String])) }
    def features_enabled=(value); end

    sig { returns(T::Boolean) }
    def features_enabled?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def features_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def features_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def features_enabled_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def features_enabled_change; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def features_enabled_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def features_enabled_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def features_enabled_in_database; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def features_enabled_previous_change; end

    sig { returns(T::Boolean) }
    def features_enabled_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def features_enabled_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def features_enabled_was; end

    sig { void }
    def features_enabled_will_change!; end

    sig { returns(T.untyped) }
    def free; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def free=(value); end

    sig { returns(T.untyped) }
    def free_before_last_save; end

    sig { returns(T.untyped) }
    def free_before_type_cast; end

    sig { returns(T::Boolean) }
    def free_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def free_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def free_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def free_changed?; end

    sig { returns(T.untyped) }
    def free_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def free_previous_change; end

    sig { returns(T::Boolean) }
    def free_previously_changed?; end

    sig { returns(T.untyped) }
    def free_previously_was; end

    sig { returns(T.untyped) }
    def free_was; end

    sig { void }
    def free_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def invalid; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def invalid=(value); end

    sig { returns(T.untyped) }
    def invalid_before_last_save; end

    sig { returns(T.untyped) }
    def invalid_before_type_cast; end

    sig { returns(T::Boolean) }
    def invalid_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def invalid_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def invalid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invalid_changed?; end

    sig { returns(T.untyped) }
    def invalid_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def invalid_previous_change; end

    sig { returns(T::Boolean) }
    def invalid_previously_changed?; end

    sig { returns(T.untyped) }
    def invalid_previously_was; end

    sig { returns(T.untyped) }
    def invalid_was; end

    sig { void }
    def invalid_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def max_monthly_recordings; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def max_monthly_recordings=(value); end

    sig { returns(T::Boolean) }
    def max_monthly_recordings?; end

    sig { returns(T.nilable(::Integer)) }
    def max_monthly_recordings_before_last_save; end

    sig { returns(T.untyped) }
    def max_monthly_recordings_before_type_cast; end

    sig { returns(T::Boolean) }
    def max_monthly_recordings_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def max_monthly_recordings_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def max_monthly_recordings_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def max_monthly_recordings_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def max_monthly_recordings_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def max_monthly_recordings_previous_change; end

    sig { returns(T::Boolean) }
    def max_monthly_recordings_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def max_monthly_recordings_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def max_monthly_recordings_was; end

    sig { void }
    def max_monthly_recordings_will_change!; end

    sig { returns(T.nilable(::String)) }
    def notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def notes=(value); end

    sig { returns(T::Boolean) }
    def notes?; end

    sig { returns(T.nilable(::String)) }
    def notes_before_last_save; end

    sig { returns(T.untyped) }
    def notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notes_changed?; end

    sig { returns(T.nilable(::String)) }
    def notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_previous_change; end

    sig { returns(T::Boolean) }
    def notes_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def notes_was; end

    sig { void }
    def notes_will_change!; end

    sig { returns(::String) }
    def plan_id; end

    sig { params(value: ::String).returns(::String) }
    def plan_id=(value); end

    sig { returns(T::Boolean) }
    def plan_id?; end

    sig { returns(T.nilable(::String)) }
    def plan_id_before_last_save; end

    sig { returns(T.untyped) }
    def plan_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def plan_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def plan_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def plan_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def plan_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def plan_id_previous_change; end

    sig { returns(T::Boolean) }
    def plan_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def plan_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plan_id_was; end

    sig { void }
    def plan_id_will_change!; end

    sig { returns(T::Boolean) }
    def private_instance_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def private_instance_enabled=(value); end

    sig { returns(T::Boolean) }
    def private_instance_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_instance_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def private_instance_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def private_instance_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_instance_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_instance_enabled_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def private_instance_enabled_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_instance_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_instance_enabled_previous_change; end

    sig { returns(T::Boolean) }
    def private_instance_enabled_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_instance_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_instance_enabled_was; end

    sig { void }
    def private_instance_enabled_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def response_time_hours; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def response_time_hours=(value); end

    sig { returns(T::Boolean) }
    def response_time_hours?; end

    sig { returns(T.nilable(::Integer)) }
    def response_time_hours_before_last_save; end

    sig { returns(T.untyped) }
    def response_time_hours_before_type_cast; end

    sig { returns(T::Boolean) }
    def response_time_hours_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def response_time_hours_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def response_time_hours_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def response_time_hours_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def response_time_hours_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def response_time_hours_previous_change; end

    sig { returns(T::Boolean) }
    def response_time_hours_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def response_time_hours_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def response_time_hours_was; end

    sig { void }
    def response_time_hours_will_change!; end

    sig { void }
    def restore_audit_trail_enabled!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_data_storage_months!; end

    sig { void }
    def restore_deprecated!; end

    sig { void }
    def restore_enterprise!; end

    sig { void }
    def restore_exceeded!; end

    sig { void }
    def restore_features_enabled!; end

    sig { void }
    def restore_free!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_invalid!; end

    sig { void }
    def restore_max_monthly_recordings!; end

    sig { void }
    def restore_notes!; end

    sig { void }
    def restore_plan_id!; end

    sig { void }
    def restore_private_instance_enabled!; end

    sig { void }
    def restore_response_time_hours!; end

    sig { void }
    def restore_site_id!; end

    sig { void }
    def restore_sso_enabled!; end

    sig { void }
    def restore_support!; end

    sig { void }
    def restore_team_member_limit!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_audit_trail_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_audit_trail_enabled?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_data_storage_months; end

    sig { returns(T::Boolean) }
    def saved_change_to_data_storage_months?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_deprecated; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_enterprise; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_exceeded; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def saved_change_to_features_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_features_enabled?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_free; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_invalid; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_max_monthly_recordings; end

    sig { returns(T::Boolean) }
    def saved_change_to_max_monthly_recordings?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_notes?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_plan_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_private_instance_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_private_instance_enabled?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_response_time_hours; end

    sig { returns(T::Boolean) }
    def saved_change_to_response_time_hours?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_site_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_site_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_sso_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_sso_enabled?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_support; end

    sig { returns(T::Boolean) }
    def saved_change_to_support?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_team_member_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_team_member_limit?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def site_id=(value); end

    sig { returns(T::Boolean) }
    def site_id?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_before_last_save; end

    sig { returns(T.untyped) }
    def site_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def site_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def site_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def site_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def site_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def site_id_previous_change; end

    sig { returns(T::Boolean) }
    def site_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def site_id_was; end

    sig { void }
    def site_id_will_change!; end

    sig { returns(T::Boolean) }
    def sso_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def sso_enabled=(value); end

    sig { returns(T::Boolean) }
    def sso_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def sso_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def sso_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def sso_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def sso_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def sso_enabled_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sso_enabled_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def sso_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def sso_enabled_previous_change; end

    sig { returns(T::Boolean) }
    def sso_enabled_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def sso_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def sso_enabled_was; end

    sig { void }
    def sso_enabled_will_change!; end

    sig { returns(T::Array[::String]) }
    def support; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def support=(value); end

    sig { returns(T::Boolean) }
    def support?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def support_before_last_save; end

    sig { returns(T.untyped) }
    def support_before_type_cast; end

    sig { returns(T::Boolean) }
    def support_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def support_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def support_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def support_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def support_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def support_previous_change; end

    sig { returns(T::Boolean) }
    def support_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def support_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def support_was; end

    sig { void }
    def support_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def team_member_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def team_member_limit=(value); end

    sig { returns(T::Boolean) }
    def team_member_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def team_member_limit_before_last_save; end

    sig { returns(T.untyped) }
    def team_member_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def team_member_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_member_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_member_limit_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def team_member_limit_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def team_member_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_member_limit_previous_change; end

    sig { returns(T::Boolean) }
    def team_member_limit_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def team_member_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def team_member_limit_was; end

    sig { void }
    def team_member_limit_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_audit_trail_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_data_storage_months?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deprecated?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enterprise?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exceeded?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_features_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_free?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invalid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_max_monthly_recordings?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_private_instance_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_response_time_hours?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_site_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sso_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_support?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_team_member_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Plan } }

    sig { returns(T::Array[::Plan]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Plan } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Plan } }

    sig do
      params(
        records: T.any(::Plan, T::Enumerable[T.any(::Plan, T::Enumerable[::Plan])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Plan, T::Enumerable[T.any(::Plan, T::Enumerable[::Plan])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Plan, T::Enumerable[T.any(::Plan, T::Enumerable[::Plan])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Plan, Integer, String, T::Enumerable[T.any(::Plan, Integer, String, T::Enumerable[::Plan])])
      ).returns(T::Array[::Plan])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Plan, Integer, String, T::Enumerable[T.any(::Plan, Integer, String, T::Enumerable[::Plan])])
      ).returns(T::Array[::Plan])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Plan]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Plan, T::Enumerable[T.any(::Plan, T::Enumerable[::Plan])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Plan, T::Enumerable[T.any(::Plan, T::Enumerable[::Plan])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Plan, T::Enumerable[T.any(::Plan, T::Enumerable[::Plan])])
      ).returns(T::Array[::Plan])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Plan]) }
    def target; end

    sig { returns(T::Array[::Plan]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Plan } }

    sig { returns(T::Array[::Plan]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Plan } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
